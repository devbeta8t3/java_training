package DataStructure;

public class Ex5_4 {

	public static void main(String[] args) {
		// Generated by SH Lee
		float a[] = new float[] {4, 3, 5, 0};
		float b[] = new float[] {3, 1, 0, 2, 1};
		
		Polynomial A = new Polynomial(3,a);			// 3차식, 계수배열 a 대입
		Polynomial B = new Polynomial(4,b);			// 4차식, 계수배열 b 대입
		
		OperatePoly optPoly = new OperatePoly();
		Polynomial C = optPoly.addPoly(A, B);
		
		System.out.print("A(x)=");
		A.printPoly();
		System.out.print("B(x)=");
		B.printPoly();
		System.out.print("C(x)=");
		C.printPoly();
		
	}
}

class OperatePoly {
	private int degree_A = 0;
	private int degree_B = 0;
	private int degree_C = 0;
	private int index_A = 0;
	private int index_B = 0;
	private int index_C = 0;
	private int expo_A;
	private int expo_B;
	private float coef_A;
	private float coef_B;
	private float coef_C;
	
	public Polynomial addPoly(Polynomial A, Polynomial B) {		// 다항식 A와 B를 더하는 메소드
		degree_A = A.getDegree();							// A의 최고 차수 3
		degree_B = B.getDegree();							// B의 최고 차수 4
		expo_A = degree_A;									// A의 지수에 최고 차수 3 대입
		expo_B = degree_B;									// B의 지수에 최고 차수 4 대입
		
		if (degree_A>=degree_B)								// A,B 중 높은 차수를 C에 적용
			degree_C = degree_A;
		else
			degree_C = degree_B;
		Polynomial C = new Polynomial(degree_C);			// 따라서, C는 높은 차수(4차)의 다항식 객체
		
		while (index_A<=degree_A && index_B<=degree_B) {	// A차수가 A인덱스보다 크거나 같고 &&
															// B차수가 B인덱스보다 크거나 같으면 반복
			
			if 		(expo_A>expo_B) {						// A의 지수가 B의 지수보다 크면
				C.setCoef(index_C++, A.getCoef(index_A++));	// A의 계수를 C의 계수에 대입 (A,C 인덱스 +1)
				expo_A--;									// A의 지수 -1
			}
			else if	(expo_A==expo_B	) {						// A와 B의 지수가 같으면 
				C.setCoef(index_C++, A.getCoef(index_A++)+B.getCoef(index_B++));// A와 B의 계수를 더해 C에 대입
				expo_A--;									// (A,B,C 인덱스 +1)
				expo_B--;									// A와 B 지수 -1
			}
			else {											// B의 지수가 크면
				C.setCoef(index_C++, B.getCoef(index_B++));	// B의 계수를 C의 계수에 대입 (B,C 인덱스 +1)
				expo_B--;									// B의 지수 -1
			}
		}
	return C;
	}
}

class Polynomial {
	private int degree;
	private float coef[] = new float[20];
	
	Polynomial (int degree, float coef[]) {			// 차수, 계수 대입
		this.degree = degree;
		this.coef = coef;
	}
	
	Polynomial (int degree){
		this.degree = degree;						// 차수 대입
		for (int i=0; i<=degree; i++) {				// 계수 초기화
			this.coef[i] = 0;
		}
	}
	
	public int getDegree() {
		return this.degree;
	}
	public float getCoef(int i) {
		return this.coef[i];
	}
	public void setCoef(int i, float coef) {		// i번째 인덱스 계수에 coef 대입
		this.coef[i] = coef;
	}
	
	public void printPoly() {
		int temp = this.degree;
		for (int i=0; i<=this.degree; i++) {
			System.out.print(" " +(int)this.coef[i]+ "x^" +temp--);
		}
		System.out.println();
	}
}

